{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","cookies","Cookies","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleKeyDown","e","keyCode","setState","prevState","bo","state","boshift","populateCanvas","console","log","timer","current","start","side","beep","before","max","Math","configurationOpen","instructionsOpen","progressOpen","handleInputChange","event","defineProperty","target","name","Number","value","updateTime","setTime","stop","updateWindowWidth","windowWidth","ppcm","document","body","scrollWidth","documentElement","offsetWidth","clientWidth","distance","delta","round","updateDistance","getCookie","height","smallLength","shift","time","ac","AudioContext","React","createRef","progress","get","set","title","addEventListener","vol","freq","duration","v","createOscillator","u","createGain","connect","frequency","type","destination","gain","currentTime","canvas","refs","ctx","getContext","offset","width","stereogram","createImageData","floor","random","pad","center","buildStereograms","data","putImageData","imageData","smallX","smallY","i","length","x","y","_this2","react_default","a","createElement","className","ref","color","Timer","initialTime","direction","startImmediately","checkpoints","callback","today","Date","toISOString","slice","JSON","stringify","Fragment","Minutes","Seconds","lib_default","isOpen","onRequestClose","contentLabel","persistCookies","defaultValue","onBlur","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8NCOlCC,EAAU,UAAIC,GAuWLC,cAnWX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgDVQ,eAAiB,SAACC,GACd,OAAOA,EAAEC,SACL,KAAK,GACDT,EAAKU,SAAS,SAACC,EAAWZ,GACtB,MAAO,CAAEa,GAAID,EAAUC,GAAKZ,EAAKa,MAAMC,WAE3Cd,EAAKe,iBACL,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACDC,QAAQC,IAAIjB,EAAKkB,OACjBlB,EAAKkB,MAAMC,QAAQC,QACfpB,EAAKqB,MAAQb,EAAEC,SACfT,EAAKsB,KAAK,IAAK,IAAK,KAChBtB,EAAKuB,QACLvB,EAAKuB,QAAS,EACdvB,EAAKU,SAAS,SAACC,EAAWZ,GACtB,MAAO,CAAEa,GAAID,EAAUC,GAAKZ,EAAKa,MAAMC,QAC9BU,IAAKC,KAAKD,IAAIb,EAAUC,GAAKZ,EAAKa,MAAMC,QAASH,EAAUa,SAIxExB,EAAKuB,QAAS,IAGlBvB,EAAKsB,KAAK,IAAK,IAAK,KAChBtB,EAAKuB,OACLvB,EAAKuB,QAAS,GAEdvB,EAAKuB,QAAS,EACdvB,EAAKU,SAAS,SAACC,EAAWZ,GACtB,MAAO,CAAEa,GAAID,EAAUC,GAAKZ,EAAKa,MAAMC,aAInDd,EAAKe,iBACL,MACJ,KAAK,GACDf,EAAKU,SAAS,CAACgB,mBAAmB,IAClC,MACJ,KAAK,GACD1B,EAAKU,SAAS,CAACiB,kBAAkB,IACjC,MACJ,KAAK,GACD3B,EAAKU,SAAS,CAACkB,cAAc,MA/FtB5B,EA8LnB6B,kBAAoB,SAACC,GACjB9B,EAAKU,SAALT,OAAA8B,EAAA,EAAA9B,CAAA,GACK6B,EAAME,OAAOC,KAAOC,OAAOJ,EAAME,OAAOG,SAE7CnC,EAAKe,kBAlMUf,EAqMnBoC,WAAa,SAACN,GACV9B,EAAKU,SAALT,OAAA8B,EAAA,EAAA9B,CAAA,GACK6B,EAAME,OAAOC,KAAOC,OAAOJ,EAAME,OAAOG,SAE7CnC,EAAKkB,MAAMC,QAAQkB,QAAqC,IAA7BH,OAAOJ,EAAME,OAAOG,QAC/CnC,EAAKkB,MAAMC,QAAQC,QACnBpB,EAAKkB,MAAMC,QAAQmB,OACnBtC,EAAKe,kBA5MUf,EA+MnBuC,kBAAoB,SAACT,GACjB9B,EAAKwC,YAAcN,OAAOJ,EAAME,OAAOG,OACvCnC,EAAKyC,KAAOhB,KAAKD,IACbkB,SAASC,KAAKC,YACdF,SAASG,gBAAgBD,YACzBF,SAASC,KAAKG,YACdJ,SAASG,gBAAgBC,YACzBJ,SAASG,gBAAgBE,aACzB/C,EAAKwC,YACTxB,QAAQC,IAAIjB,EAAKyC,KAAOzC,EAAKgD,SAAW,KACxChD,EAAKU,SAAS,CAAEuC,MAAOxB,KAAKyB,MAAMlD,EAAKyC,KAAOzC,EAAKgD,SAAW,QAzN/ChD,EA4NnBmD,eAAiB,SAACrB,GACd9B,EAAKgD,SAAWd,OAAOJ,EAAME,OAAOG,OACpCnC,EAAKU,SAAS,CAAEuC,MAAOxB,KAAKyB,MAAMlD,EAAKyC,KAAOzC,EAAKgD,SAAW,QA5N9DhD,EAAKa,MAAQ,CACToC,MAAOjD,EAAKoD,UAAU,UAAY,GAClCtC,QAASd,EAAKoD,UAAU,YAAc,GACtCxC,GAAI,EACJY,IAAK,EACLG,kBAAkB,EAClBD,mBAAmB,EACnBE,cAAc,EACdoB,SAAUhD,EAAKoD,UAAU,aAAe,GACxCC,OAAQrD,EAAKoD,UAAU,WAAa,IACpCE,YAAatD,EAAKoD,UAAU,gBAAkB,IAC9CG,MAAOvD,EAAKoD,UAAU,UAAY,GAClCI,KAAMxD,EAAKoD,UAAU,SAAW,IAEpCpD,EAAKwC,YAAcxC,EAAKoD,UAAU,gBAAkB,GACpDpD,EAAKgD,SAAWhD,EAAKoD,UAAU,aAAe,GAC9CpD,EAAKyC,KAAOzC,EAAKoD,UAAU,SAAW,GACtCpD,EAAKqB,KAAO,EACZrB,EAAKuB,QAAS,EACdvB,EAAKyD,GAAK,IAAIC,aACd1D,EAAKkB,MAAQyC,IAAMC,YACnB5D,EAAK6D,SAAWjE,EAAQkE,IAAI,aAAe,KAvB5B9D,yEA0BTiC,GACN,OAAOC,OAAOtC,EAAQkE,IAAI7B,6CAI1BrC,EAAQmE,IAAI,QAAS5D,KAAKU,MAAMoC,OAChCrD,EAAQmE,IAAI,UAAW5D,KAAKU,MAAMC,SAClClB,EAAQmE,IAAI,WAAY5D,KAAKU,MAAMmC,UACnCpD,EAAQmE,IAAI,SAAU5D,KAAKU,MAAMwC,QACjCzD,EAAQmE,IAAI,cAAe5D,KAAKU,MAAMyC,aACtC1D,EAAQmE,IAAI,QAAS5D,KAAKU,MAAM0C,OAChC3D,EAAQmE,IAAI,OAAQ5D,KAAKU,MAAM2C,MAC/B5D,EAAQmE,IAAI,cAAe5D,KAAKqC,aAChC5C,EAAQmE,IAAI,WAAY5D,KAAK6C,UAC7BpD,EAAQmE,IAAI,OAAQ5D,KAAKsC,kDAIzBC,SAASsB,MAAM,oCACftB,SAASuB,iBAAiB,UAAW9D,KAAKI,gBAC1CJ,KAAKY,8CAuDJmD,EAAKC,EAAMC,GACZ,IAAIC,EAAElE,KAAKsD,GAAGa,mBACVC,EAAEpE,KAAKsD,GAAGe,aACdH,EAAEI,QAAQF,GACVF,EAAEK,UAAUvC,MAAMgC,EAClBE,EAAEM,KAAK,SACPJ,EAAEE,QAAQtE,KAAKsD,GAAGmB,aAClBL,EAAEM,KAAK1C,MAAU,IAAJ+B,EACbG,EAAEjD,MAAMjB,KAAKsD,GAAGqB,aAChBT,EAAE/B,KAAKnC,KAAKsD,GAAGqB,YAAqB,KAATV,4CAIvBjE,KAAKU,MAAMD,GAAK,GAChBT,KAAKO,SAAS,SAACC,EAAWZ,GACtB,MAAO,CAAEa,GAAI,KAIrB,IAAMmE,EAAS5E,KAAK6E,KAAKD,OACnBE,EAAMF,EAAOG,WAAW,MAE1BC,EAAS1D,KAAKyB,MAAM/C,KAAKU,MAAMD,GAAKT,KAAKU,MAAMoC,OAC/CmC,EAAQjF,KAAKU,MAAMwC,OAAS8B,EAEhCJ,EAAOK,MAAQA,EACfL,EAAO1B,OAASlD,KAAKU,MAAMwC,OAC3B,IAAIgC,EAAaJ,EAAIK,gBAAgBF,EAAOjF,KAAKU,MAAMwC,QAEvDlD,KAAKkB,KAAOI,KAAK8D,MAAsB,EAAhB9D,KAAK+D,UAAgB,GAE5C,IAAIC,EAAMtF,KAAKU,MAAMwC,OAAS,GAC1BqC,EAASvF,KAAKU,MAAMwC,OAAS,EAAIlD,KAAKU,MAAMyC,YAAc,EAE9D,OAAOnD,KAAKkB,MACR,KAAK,GAEDlB,KAAKwF,iBAAiBN,EAAWO,KAAMR,EAAOD,EAAQM,EAAKC,GAC3D,MACJ,KAAK,GAEDvF,KAAKwF,iBAAiBN,EAAWO,KAAMR,EAAOD,EAAQO,EAAQD,GAC9D,MACJ,KAAK,GAEDtF,KAAKwF,iBAAiBN,EAAWO,KAAMR,EAAOD,EAAQhF,KAAKU,MAAMwC,OAASlD,KAAKU,MAAMyC,YAAcmC,EAAKC,GACxG,MACJ,KAAK,GAEDvF,KAAKwF,iBAAiBN,EAAWO,KAAMR,EAAOD,EAAQO,EAAQvF,KAAKU,MAAMwC,OAASlD,KAAKU,MAAMyC,YAAcmC,GAGnHR,EAAIY,aAAaR,EAAY,EAAG,4CAGnBS,EAAWV,EAAOxE,EAAImF,EAAQC,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,GAAG,EAAG,CACxC,IAAIE,EAAIF,EAAE,EAAIb,EACVgB,EAAI3E,KAAK8D,MAAOU,EAAE,EAAKb,GAEvBM,GAAUN,EAAQxE,GAAM,EAIpBkF,EAAUG,GAFdE,EAAKf,EAAQxE,EACR8E,EAAS,EAAKS,GAAKA,EAAKT,EAAS,GAAOA,EAAS,EAAKU,GAAKA,EAAKV,EAAS,EAC3D,IACPA,EAAS,GAAMS,GAAKA,EAAKT,EAAS,IAAQA,EAAS,GAAMU,GAAKA,EAAKV,EAAS,GACrE,EAE4B,IAA5BjE,KAAKyB,MAAMzB,KAAK+D,UAGpB,EAGfW,EAAIvF,EACJkF,EAAUG,EAAI,GAAK,EAEdE,EAAIJ,EAASnF,GAAQuF,EAAIJ,EAAS5F,KAAKU,MAAMyC,YAAc1C,GACxDwF,EAAIJ,GAAYI,EAAIJ,EAAS7F,KAAKU,MAAMyC,YAC5CwC,EAAUG,EAAI,GAAKH,EAAUG,EAAS,EAALrF,EAAS,EAAIT,KAAKU,MAAM0C,OAEzDuC,EAAUG,EAAI,GAAKH,EAAUG,EAAS,EAALrF,GAGzCkF,EAAUG,EAAI,GAAK,EACnBH,EAAUG,EAAI,GAAK,sCAuClB,IAAAI,EAAAlG,KACL,OACImG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQE,IAAI,SAAStB,MAAM,OAAO/B,OAAO,QACzCiD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,MAAM,SAAZ,MAAwBxG,KAAKU,MAAMD,GAAnC,QAA4CT,KAAKU,MAAMW,IAAvD,QACI8E,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACIF,IAAKvG,KAAKe,MACV2F,YAA+B,IAAlB1G,KAAKU,MAAM2C,KACxBsD,UAAU,WACVC,kBAAkB,EAClBC,YAAa,CAAC,CACNxD,KAAM,EACNyD,SAAU,WACNZ,EAAK/E,KAAK,IAAK,IAAK,KACpB,IAAI4F,GAAM,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IACtCH,KAASb,EAAKxC,YAAawC,EAAKxF,MAAMW,IAAM6E,EAAKxC,SAASqD,MAC5Db,EAAKxC,SAASqD,GAASb,EAAKxF,MAAMW,IAClC5B,EAAQmE,IAAI,WAAYuD,KAAKC,UAAUlB,EAAKxC,gBAK3D,kBACGyC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiB,SAAP,KACIlB,EAAAC,EAAAC,cAACI,EAAA,EAAMa,QAAP,MADJ,MACwBnB,EAAAC,EAAAC,cAACI,EAAA,EAAMc,QAAP,MADxB,QAIApB,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,0DAGRF,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,OAAQzH,KAAKU,MAAMc,iBACnBkG,eAAgB,WACRxB,EAAK3F,SAAS,CAACiB,kBAAkB,KAEzCmG,aAAa,gBAEbxB,EAAAC,EAAAC,cAAA,0BAAqBF,EAAAC,EAAAC,cAAA,WACrBF,EAAAC,EAAAC,cAAA,wVACAF,EAAAC,EAAAC,cAAA,smBACAF,EAAAC,EAAAC,cAAA,osBACAF,EAAAC,EAAAC,cAAA,oMACAF,EAAAC,EAAAC,cAAA,+FAEJF,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,OAAQzH,KAAKU,MAAMe,aACnBiG,eAAgB,WACRxB,EAAK3F,SAAS,CAACkB,cAAc,KAErCkG,aAAa,YAEbxB,EAAAC,EAAAC,cAAA,sBAAiBF,EAAAC,EAAAC,cAAA,WAChBc,KAAKC,UAAUpH,KAAK0D,WAEzByC,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACIqB,OAAQzH,KAAKU,MAAMa,kBACnBmG,eAAgB,WACRxB,EAAK0B,iBACL1B,EAAK3F,SAAS,CAACgB,mBAAmB,KAE1CoG,aAAa,iBAEbxB,EAAAC,EAAAC,cAAA,2BAAsBF,EAAAC,EAAAC,cAAA,WACtBF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,qCAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,cACL0C,KAAK,SACLqD,aAAc7H,KAAKqC,YACnByF,OAAQ9H,KAAKoC,qBACb+D,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,wCAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,WACL0C,KAAK,SACLqD,aAAc7H,KAAK6C,SACnBiF,OAAQ9H,KAAKgD,kBACbmD,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,sCAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,SACL0C,KAAK,SACLqD,aAAc7H,KAAKU,MAAMwC,OACzB4E,OAAQ9H,KAAK0B,qBACbyE,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,6CAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,cACL0C,KAAK,SACLqD,aAAc7H,KAAKU,MAAMyC,YACzB2E,OAAQ9H,KAAK0B,qBACbyE,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,4CAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,QACL0C,KAAK,SACLqD,aAAc7H,KAAKU,MAAM0C,MACzB0E,OAAQ9H,KAAK0B,qBACbyE,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,8CAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,UACL0C,KAAK,UACLqD,aAAc7H,KAAKU,MAAMC,QACzBmH,OAAQ9H,KAAK0B,qBACbyE,EAAAC,EAAAC,cAAA,WACRF,EAAAC,EAAAC,cAAA,2CAEIF,EAAAC,EAAAC,cAAA,SACIvE,KAAK,OACL0C,KAAK,SACLqD,aAAc7H,KAAKU,MAAM2C,KACzByE,OAAQ9H,KAAKiC,wBA5V3B8F,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAAShG,SAASiG,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73efbfc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Modal from 'react-modal';\nimport Timer from 'react-compound-timer';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            delta: this.getCookie('delta') || 22,\n            boshift: this.getCookie('boshift') || .5,\n            bo: 0,\n            max: 0,\n            instructionsOpen: true,\n            configurationOpen: false,\n            progressOpen: false,\n            distance: this.getCookie('distance') || 40,\n            height: this.getCookie('height') || 500,\n            smallLength: this.getCookie('smallLength') || 100,\n            shift: this.getCookie('shift') || 16,\n            time: this.getCookie('time') || 10\n        };\n        this.windowWidth = this.getCookie('windowWidth') || 30;\n        this.distance = this.getCookie('distance') || 40;\n        this.ppcm = this.getCookie('ppcm') || 56;\n        this.side = 0;\n        this.before = false;\n        this.ac = new AudioContext();\n        this.timer = React.createRef();\n        this.progress = cookies.get('progress') || \"{}\";\n    }\n\n    getCookie(name) {\n        return Number(cookies.get(name));\n    }\n\n    persistCookies() {\n        cookies.set('delta', this.state.delta);\n        cookies.set('boshift', this.state.boshift);\n        cookies.set('distance', this.state.distance);\n        cookies.set('height', this.state.height);\n        cookies.set('smallLength', this.state.smallLength);\n        cookies.set('shift', this.state.shift);\n        cookies.set('time', this.state.time);\n        cookies.set('windowWidth', this.windowWidth);\n        cookies.set('distance', this.distance);\n        cookies.set('ppcm', this.ppcm);\n    }\n\n    componentDidMount() {\n        document.title=\"Convergence Insufficiency Trainer\";\n        document.addEventListener(\"keydown\", this._handleKeyDown);\n        this.populateCanvas();\n    }\n\n    _handleKeyDown = (e) => {\n        switch(e.keyCode) {\n            case 32:\n                this.setState((prevState, props) => {\n                    return { bo: prevState.bo - this.state.boshift };\n                });\n                this.populateCanvas();\n                break;\n            case 37:\n            case 38:\n            case 39:\n            case 40:\n                console.log(this.timer);\n                this.timer.current.start();\n                if (this.side == e.keyCode) {\n                    this.beep(100, 520, 200);\n                    if (this.before) {\n                        this.before = false;\n                        this.setState((prevState, props) => {\n                            return { bo: prevState.bo + this.state.boshift,\n                                     max: Math.max(prevState.bo + this.state.boshift, prevState.max)\n                            };\n                        });\n                    } else {\n                        this.before = true;\n                    }\n                } else {\n                    this.beep(100, 220, 200);\n                    if (this.before) {\n                        this.before = false;\n                    } else {\n                        this.before = true;\n                        this.setState((prevState, props) => {\n                            return { bo: prevState.bo - this.state.boshift };\n                        });\n                    }\n                }\n                this.populateCanvas();\n                break;\n            case 67:\n                this.setState({configurationOpen: true});\n                break;\n            case 73:\n                this.setState({instructionsOpen: true});\n                break;\n            case 80:\n                this.setState({progressOpen: true});\n            default:\n                break;\n        }\n    }\n\n    beep(vol, freq, duration){\n        var v=this.ac.createOscillator();\n        var u=this.ac.createGain();\n        v.connect(u);\n        v.frequency.value=freq;\n        v.type=\"square\";\n        u.connect(this.ac.destination);\n        u.gain.value=vol*0.01;\n        v.start(this.ac.currentTime);\n        v.stop(this.ac.currentTime+duration*0.001);\n    }\n\n    populateCanvas() {\n        if (this.state.bo < 0) {\n            this.setState((prevState, props) => {\n                return { bo: 0 };\n            });\n        }\n\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n\n        var offset = Math.round(this.state.bo * this.state.delta);\n        var width = this.state.height + offset;\n\n        canvas.width = width;\n        canvas.height = this.state.height;\n        var stereogram = ctx.createImageData(width, this.state.height);\n\n        this.side = Math.floor(Math.random() * 4) + 37;\n\n        var pad = this.state.height / 10\n        var center = this.state.height / 2 - this.state.smallLength / 2\n\n        switch(this.side) {\n            case 37:\n                // left\n                this.buildStereograms(stereogram.data, width, offset, pad, center);\n                break;\n            case 38:\n                // up\n                this.buildStereograms(stereogram.data, width, offset, center, pad);\n                break;\n            case 39:\n                // right\n                this.buildStereograms(stereogram.data, width, offset, this.state.height - this.state.smallLength - pad, center);\n                break;\n            case 40:\n                // down\n                this.buildStereograms(stereogram.data, width, offset, center, this.state.height - this.state.smallLength - pad);\n        }\n\n        ctx.putImageData(stereogram, 0, 0);\n    }\n\n    buildStereograms(imageData, width, bo, smallX, smallY) {\n        for (var i = 0; i < imageData.length; i+=4) {\n            var x = i/4 % width;\n            var y = Math.floor((i/4) / width);\n\n            var center = (width - bo) / 2;\n\n            if (x < (width - bo)) {\n                if ((center - 7) < x && x < (center + 7) && (center - 7) < y && y < (center + 7)) {\n                    imageData[i] = 255;\n                } else if ((center - 10) < x && x < (center + 10) && (center - 10) < y && y < (center + 10)) {\n                    imageData[i] = 0;\n                } else {\n                    imageData[i] = Math.round(Math.random()) * 255;\n                }\n            } else {\n                imageData[i] = 0;\n            }\n\n            if (x < bo) {\n                imageData[i + 2] = 0;\n            } else {\n                if ((x > smallX + bo) && (x < smallX + this.state.smallLength + bo)\n                    && (y > smallY) && (y < smallY + this.state.smallLength)) {\n                    imageData[i + 2] = imageData[i - bo * 4 - 4 * this.state.shift];\n                } else {\n                    imageData[i + 2] = imageData[i - bo * 4];\n                }\n            }\n            imageData[i + 1] = 0;\n            imageData[i + 3] = 255;\n        }\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            [event.target.name]: Number(event.target.value)\n        });\n        this.populateCanvas();\n    }\n\n    updateTime = (event) => {\n        this.setState({\n            [event.target.name]: Number(event.target.value)\n        });\n        this.timer.current.setTime(Number(event.target.value) * 60000);\n        this.timer.current.start();\n        this.timer.current.stop();\n        this.populateCanvas();\n    }\n\n    updateWindowWidth = (event) => {\n        this.windowWidth = Number(event.target.value);\n        this.ppcm = Math.max(\n            document.body.scrollWidth,\n            document.documentElement.scrollWidth,\n            document.body.offsetWidth,\n            document.documentElement.offsetWidth,\n            document.documentElement.clientWidth\n        ) / this.windowWidth;\n        console.log(this.ppcm * this.distance / 100);\n        this.setState({ delta: Math.round(this.ppcm * this.distance / 100)});\n    }\n\n    updateDistance = (event) => {\n        this.distance = Number(event.target.value);\n        this.setState({ delta: Math.round(this.ppcm * this.distance / 100)});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <canvas ref=\"canvas\" width=\"1000\" height=\"500\"></canvas>\n                <br />\n                <div>\n                    <font color=\"white\">BO {this.state.bo} MAX {this.state.max} TIME\n                        <Timer\n                            ref={this.timer}\n                            initialTime={this.state.time * 60000}\n                            direction=\"backward\"\n                            startImmediately={false}\n                            checkpoints={[{\n                                    time: 0,\n                                    callback: () => {\n                                        this.beep(100, 300, 1000);\n                                        var today=new Date().toISOString().slice(0, 10);\n                                        if (!(today in this.progress) || this.state.max > this.progress[today]) {\n                                            this.progress[today] = this.state.max;\n                                            cookies.set('progress', JSON.stringify(this.progress));\n                                        }\n                                    }\n                            }]}\n                        >\n                            {() => (\n                                <React.Fragment>\n                                    <Timer.Minutes /> m <Timer.Seconds /> s\n                                </React.Fragment>\n                            )}\n                        </Timer><br />\n                        <i>[i]nstructions, [c]onfiguration, [p]rogress</i>\n                    </font>\n                </div>\n                <Modal\n                    isOpen={this.state.instructionsOpen}\n                    onRequestClose={() => {\n                            this.setState({instructionsOpen: false});\n                    }}\n                    contentLabel=\"Instructions\"\n                >\n                    <h2>INSTRUCTIONS</h2><br />\n                    <p>This webpage contains an interactive training tool for addressing convergence insuffiency as an alternative to pencil pushups. It utilizes random dot stereograms of varying vergence demands. Please note that this tool was developed by a layperson for personal use and does not constitute medical advice. Talk to your opthamologist!</p>\n                    <p>Before using this tool, it is important to set certain configuration options. Using a ruler, measure the physical width of the webpage in centimeters. I suggest that you sit 40cm/16in from the screen, but if you plan on sitting a different distance, record that as well. By default, a practice session will last ten minutes, but you can adjust the timer to a different time if you so choose (or your doctor recommends). All other defaults are probably sane. Press [c] to pull up the configuration modal. Settings are stored via a cookie so next time you visit the page you won't need to re-enter them.</p>\n                    <p>To use, wear red-blue 3d glasses and stare at the colored square in the middle of the screen. Along one of the sides there will be a floating square. Press the arrow key that corresponds to the side of the large square the floating image is on (e.g. if it's on the top, press the up arrow key). The page will emit a different tone depending on if you are correct or not. As you correctly identify the floating square, it will slowly move its red and blue subcomponents further apart, increasing the effort your eyes need to make in order to fuse the images together. If, after a few seconds, you cannot fuse the images or find the floating square, hit the spacebar to bring them closer together.</p>\n                    <p>Over time, you should be able to converge images that are farther apart. At the end of each session, your max score is stored. Press [p] to view your max score across different dates.</p>\n                    <p>To close the instructions (or other modals) click on the page outside of the box.</p>\n                </Modal>\n                <Modal\n                    isOpen={this.state.progressOpen}\n                    onRequestClose={() => {\n                            this.setState({progressOpen: false});\n                    }}\n                    contentLabel=\"Progress\"\n                >\n                    <h2>PROGRESS</h2><br />\n                    {JSON.stringify(this.progress)}\n                </Modal>\n                <Modal\n                    isOpen={this.state.configurationOpen}\n                    onRequestClose={() => {\n                            this.persistCookies();\n                            this.setState({configurationOpen: false});\n                    }}\n                    contentLabel=\"Configuration\"\n                >\n                    <h2>CONFIGURATION</h2><br />\n                    <form>\n                        <label>\n                            Width of window (cm):\n                            <input\n                                name=\"windowWidth\"\n                                type=\"number\"\n                                defaultValue={this.windowWidth}\n                                onBlur={this.updateWindowWidth} />\n                        </label><br />\n                        <label>\n                            Distance to screen (cm):\n                            <input\n                                name=\"distance\"\n                                type=\"number\"\n                                defaultValue={this.distance}\n                                onBlur={this.updateDistance} />\n                        </label><br />\n                        <label>\n                            Height of square (px):\n                            <input\n                                name=\"height\"\n                                type=\"number\"\n                                defaultValue={this.state.height}\n                                onBlur={this.handleInputChange} />\n                        </label><br />\n                        <label>\n                            Height of offset square (px):\n                            <input\n                                name=\"smallLength\"\n                                type=\"number\"\n                                defaultValue={this.state.smallLength}\n                                onBlur={this.handleInputChange} />\n                        </label><br />\n                        <label>\n                            Shift of offset square (px):\n                            <input\n                                name=\"shift\"\n                                type=\"number\"\n                                defaultValue={this.state.shift}\n                                onBlur={this.handleInputChange} />\n                        </label><br />\n                        <label>\n                            Delta of prism diopter demand:\n                            <input\n                                name=\"boshift\"\n                                type=\"boshift\"\n                                defaultValue={this.state.boshift}\n                                onBlur={this.handleInputChange} />\n                        </label><br />\n                        <label>\n                            Time per session (minutes):\n                            <input\n                                name=\"time\"\n                                type=\"number\"\n                                defaultValue={this.state.time}\n                                onBlur={this.updateTime} />\n                        </label>\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}